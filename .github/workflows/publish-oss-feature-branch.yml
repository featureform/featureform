name: Publish Feature Branch
on:
  workflow_dispatch:
    inputs:
      version-postfix:
        description: "Feature Version number (ex. 77, will resolve to 0.0.0-rc77)"
        required: true
        type: string
      type:
        description: "If this version is a release or pre-release"
        required: true
        default: "pre-release"
        type: choice
        options: # enforce 1 option for now
          - pre-release
      delete:
        description: "Delete the namespace"
        type: boolean
        default: false
env:
  PRERELEASE_TAG: 0.0.0-rc
  AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
  AWS_DEFAULT_REGION: "us-east-1"

jobs:
  api-server:
    if: inputs.delete == false
    name: Build API Server
    environment: Deployment
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set production tag
        run: echo "TAG=0.0.0-rc${{ inputs.version-postfix }}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./api/Dockerfile
          tags: featureformcom/api-server:${{ env.TAG }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  backup:
    if: inputs.delete == false
    name: Build Backup Image
    environment: Deployment
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set production tag
        run: echo "TAG=0.0.0-rc${{ inputs.version-postfix }}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and export pre-release
        if: ${{ inputs.type == 'pre-release' }}
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./backup/Dockerfile
          tags: featureformcom/backup:${{ env.TAG }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and export release
        if: ${{ inputs.type == 'release' }}
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./backup/Dockerfile
          tags: featureformcom/backup:${{ env.TAG }},featureformcom/backup:latest
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  coordinator:
    if: inputs.delete == false
    name: Build Coordinator
    environment: Deployment
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set production tag
        run: echo "TAG=0.0.0-rc${{ inputs.version-postfix }}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./coordinator/Dockerfile
          tags: featureformcom/coordinator:${{ env.TAG }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  dashboard:
    if: inputs.delete == false
    name: Build Dashboard
    environment: Deployment
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set production tag
        run: echo "TAG=0.0.0-rc${{ inputs.version-postfix }}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./dashboard/Dockerfile
          tags: featureformcom/dashboard:${{ env.TAG }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  metadata:
    if: inputs.delete == false
    name: Build Metadata
    environment: Deployment
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set production tag
        run: echo "TAG=0.0.0-rc${{ inputs.version-postfix }}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./metadata/Dockerfile
          tags: featureformcom/metadata:${{ env.TAG }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  dashboard-metadata:
    if: inputs.delete == false
    name: Build Dashboard Metadata
    environment: Deployment
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set production tag
        run: echo "TAG=0.0.0-rc${{ inputs.version-postfix }}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./metadata/dashboard/Dockerfile
          tags: featureformcom/metadata-dashboard:${{ env.TAG }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  serving:
    if: inputs.delete == false
    name: Build Serving
    environment: Deployment
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set production tag
        run: echo "TAG=0.0.0-rc${{ inputs.version-postfix }}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./serving/Dockerfile
          tags: featureformcom/serving:${{ env.TAG }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  worker:
    if: inputs.delete == false
    name: Build Worker
    environment: Deployment
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set production tag
        run: echo "TAG=0.0.0-rc${{ inputs.version-postfix }}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./runner/Dockerfile
          tags: featureformcom/worker:${{ env.TAG }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  k8s_runner:
    if: inputs.delete == false
    name: Build k8s Runner
    environment: Deployment
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set production tag
        run: echo "TAG=0.0.0-rc${{ inputs.version-postfix }}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./provider/scripts/k8s/Dockerfile
          tags: featureformcom/k8s_runner:${{ env.TAG }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  helm_install:
    if: inputs.delete == false
    name: Helm Install or Upgrade
    runs-on: "ubuntu-latest"
    defaults:
      run:
        working-directory: ./
    needs:
      [
        "api-server",
        "backup",
        "coordinator",
        "dashboard",
        "metadata",
        "dashboard-metadata",
        "serving",
        "worker",
        "k8s_runner",
      ]
    outputs:
      found: ${{ steps.nscheck.outputs.found }}
    steps:
      - uses: actions/checkout@v3
      - name: Find the namespace
        id: nscheck
        uses: WyriHaximus/github-action-helm3@v3
        with:
          exec: |
            version=rc${{ inputs.version-postfix }}
            ns=$(helm ls -A | grep $version|awk '{print $2}')
            if [[ "$ns" ]]; then echo "found=true" >> "$GITHUB_OUTPUT"; else echo "found=false" >> "$GITHUB_OUTPUT"; fi;
          kubeconfig: "${{ secrets.KUBECONFIG }}"
          overrule_existing_kubeconfig: "true"

      - name: Search result
        run: echo "Namespace rc${{ inputs.version-postfix }} exists? ${{ steps.nscheck.outputs.found }}"

      - name: Install a new namespace
        if: contains(steps.nscheck.outputs.found, 'false')
        uses: WyriHaximus/github-action-helm3@v3
        with:
          exec: |
            helm install featureform ./charts/featureform -n rc${{ inputs.version-postfix }} --create-namespace --set hostname=rc${{ inputs.version-postfix }}.pr.featureform.com --set versionOverride=0.0.0-rc${{ inputs.version-postfix }} --set nginx.enabled=false --set selfSignedCert=false --set publicCert=true --set restartOnUpdate=true
            helm install quickstart ./charts/quickstart -n rc${{ inputs.version-postfix }}
          kubeconfig: "${{ secrets.KUBECONFIG }}"
          overrule_existing_kubeconfig: "true"

      - name: Upgrade existing namespace
        if: contains(steps.nscheck.outputs.found, 'true')
        uses: WyriHaximus/github-action-helm3@v3
        with:
          exec: helm upgrade --reuse-values featureform ./charts/featureform -n rc${{ inputs.version-postfix }}
          kubeconfig: "${{ secrets.KUBECONFIG }}"
          overrule_existing_kubeconfig: "true"

  kubectl_delete_namespace:
    if: inputs.delete == true
    name: k8s Delete Namespace
    runs-on: ubuntu-latest
    environment: Deployment
    defaults:
      run:
        working-directory: ./
    steps:
      - name: delete namespace
        uses: kodermax/kubectl-aws-eks@main
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBECONFIG_BASE }}
        with:
          args: delete ns rc${{ inputs.version-postfix }}

name: End to End Testing
on:
  pull_request:
    branches: 'some_nonexistant_branch'

concurrency:
  group: ${{ github.head_ref }}-e2e
  cancel-in-progress: true
jobs:
  api-server:
    name: Build API Server
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./api/Dockerfile
          tags: local/api-server:stable
          push: false
          outputs: type=docker,dest=/tmp/api-server.tar
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Upload image
        uses: actions/upload-artifact@v4
        with:
          name: api-server
          path: /tmp/api-server.tar

  backup:
    name: Build Backup
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./backup/Dockerfile
          tags: local/backup:stable
          push: false
          outputs: type=docker,dest=/tmp/backup.tar
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Upload image
        uses: actions/upload-artifact@v4
        with:
          name: backup
          path: /tmp/backup.tar

#  coordinator:
#    name: Build Coordinator
#    defaults:
#      run:
#        working-directory: ./
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v2
#
#      - name: Build and export
#        uses: docker/build-push-action@v3
#        with:
#          context: .
#          file: ./coordinator/Dockerfile
#          tags: local/coordinator:stable
#          push: false
#          outputs: type=docker,dest=/tmp/coordinator.tar
#      - name: Upload image
#        uses: actions/upload-artifact@v4
#        with:
#          name: coordinator
#          path: /tmp/coordinator.tar

  dashboard:
    name: Build Dashboard
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./dashboard/Dockerfile
          tags: local/dashboard:stable
          push: false
          outputs: type=docker,dest=/tmp/dashboard.tar
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Upload image
        uses: actions/upload-artifact@v4
        with:
          name: dashboard
          path: /tmp/dashboard.tar

  metadata:
    name: Build Metadata
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./metadata/Dockerfile
          tags: local/metadata:stable
          push: false
          outputs: type=docker,dest=/tmp/metadata.tar
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Upload image
        uses: actions/upload-artifact@v4
        with:
          name: metadata
          path: /tmp/metadata.tar

  dashboard-metadata:
    name: Build Dashboard Metadata
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./metadata/dashboard/Dockerfile
          tags: local/metadata-dashboard:stable
          push: false
          outputs: type=docker,dest=/tmp/metadata-dashboard.tar
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Upload image
        uses: actions/upload-artifact@v4
        with:
          name: metadata-dashboard
          path: /tmp/metadata-dashboard.tar

  serving:
    name: Build Serving
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./serving/Dockerfile
          tags: local/serving:stable
          push: false
          outputs: type=docker,dest=/tmp/serving.tar
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Upload image
        uses: actions/upload-artifact@v4
        with:
          name: serving
          path: /tmp/serving.tar

#  worker:
#    name: Build Worker
#    defaults:
#      run:
#        working-directory: ./
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v2
#
#      - name: Build and export
#        uses: docker/build-push-action@v3
#        with:
#          context: .
#          file: ./runner/Dockerfile
#          tags: local/worker:stable
#          push: false
#          outputs: type=docker,dest=/tmp/worker.tar
#      - name: Upload image
#        uses: actions/upload-artifact@v4
#        with:
#          name: worker
#          path: /tmp/worker.tar

  k8s_runner:
    name: Build K8s Runner
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Manual build and save b/c Github Actions not setting docker env properly
      - name: Build Base
        run: docker build . -t local/k8s_runner:stable -f ./provider/scripts/k8s/Dockerfile

      - name: Build scikit
        run: docker build . -t local/k8s_runner:scikit-stable -f ./provider/scripts/k8s/Dockerfile.scikit

      - name: Save Base
        run: docker save local/k8s_runner:stable > /tmp/k8s_runner.tar

      - name: Save Scikit
        run: docker save local/k8s_runner:scikit-stable > /tmp/k8s_runner_scikit.tar

      - name: Upload Base Image
        uses: actions/upload-artifact@v4
        with:
          name: k8s_runner
          path: /tmp/k8s_runner.tar

      - name: Upload Scikit Image
        uses: actions/upload-artifact@v4
        with:
          name: k8s_runner_scikit
          path: /tmp/k8s_runner_scikit.tar


  test:
    name: Run Tests
    environment: Integration testing
    needs: [api-server, dashboard, dashboard-metadata, metadata, serving, k8s_runner, backup]
    defaults:
      run:
        working-directory: ./
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          names: api-server dashboard dashboard-metadata metadata serving k8s_runner k8s_runner_scikit backup
          path: /tmp

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          check-latest: true

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.21

      - name: Install Python Dependencies
        run: |
          pip install pyyaml click
          pip install -r ./backup/requirements.txt


      - name: Check Artifacts
        run: |
          ls /tmp
          ls /tmp/api-server

      - name: Install grpc_tools
        run: pip install grpcio-tools requests python-dotenv

      - name: Install Protobuf
        run: sudo snap install protobuf --classic

      - name: Install minikube and helm
        run: |
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo install minikube-linux-amd64 /usr/local/bin/minikube
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh

      - name: Configure Docker Socket
        run: |
          minikube start --kubernetes-version=v1.23.12
          docker build . -t local/coordinator:stable -f coordinator/Dockerfile --build-arg TESTING="True"

      - name: Load image
        run: |
          docker load --input /tmp/api-server/api-server.tar
          docker load --input /tmp/dashboard/dashboard.tar
          docker load --input /tmp/metadata-dashboard/metadata-dashboard.tar
          docker load --input /tmp/metadata/metadata.tar
          docker load --input /tmp/serving/serving.tar
          docker load --input /tmp/k8s_runner/k8s_runner.tar
          docker load --input /tmp/k8s_runner_scikit/k8s_runner_scikit.tar
          docker load --input /tmp/backup/backup.tar
          minikube image load local/api-server:stable
          minikube image load local/coordinator:stable
          minikube image load local/dashboard:stable
          minikube image load local/metadata-dashboard:stable
          minikube image load local/metadata:stable
          minikube image load local/serving:stable
          minikube image load local/k8s_runner:stable
          minikube image load local/k8s_runner:scikit-stable
          minikube image load local/backup:stable
          minikube image ls

      - name: Helm Install
        run: |
          helm repo add jetstack https://charts.jetstack.io
          helm repo update
          helm install certmgr jetstack/cert-manager --set installCRDs=true --version v1.8.0 --namespace cert-manager --create-namespace
          helm install featureform ./charts/featureform --set repository=local --set pullPolicy=Never --set version=stable --set backup.enabled=true --set backup.schedule="* * * * *"

      - name: Create Secret
        env:
          AZURE_ACCOUNT_NAME: ${{ secrets.AZURE_ACCOUNT_NAME }}
          AZURE_STORAGE_KEY: ${{ secrets.AZURE_ACCOUNT_KEY }}
          AZURE_CONTAINER: ${{ secrets.AZURE_CONTAINER_NAME }}
          STORAGE_PATH: "backup"
        run: |
          python backup/create_secret.py azure $AZURE_ACCOUNT_NAME "$AZURE_STORAGE_KEY" $AZURE_CONTAINER $STORAGE_PATH
          kubectl apply -f backup_secret.yaml

      - name: Run CLI
        run: |
          kubectl get secret featureform-ca-secret -o=custom-columns=':.data.tls\.crt'| base64 -d > tls.crt
          export FEATUREFORM_HOST=localhost:443
          export FEATUREFORM_CERT=tls.crt
      
      - name: create-json
        id: create-json-2
        uses: jsdaniell/create-json@1.1.2
        with:
          name: "./provider/gcp_credentials.json"
          json: ${{ secrets.GCS_CREDENTIALS }}

      - name: Test End-to-End
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
          AWS_EMR_CLUSTER_ID: ${{ secrets.AWS_EMR_CLUSTER_ID }}
          AWS_EMR_CLUSTER_REGION: ${{ secrets.AWS_EMR_CLUSTER_REGION }}
          AZURE_ACCOUNT_KEY: ${{ secrets.AZURE_ACCOUNT_KEY }}
          AZURE_ACCOUNT_NAME: ${{ secrets.AZURE_ACCOUNT_NAME }}
          AZURE_CONTAINER_NAME: ${{ secrets.AZURE_CONTAINER_NAME }}
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
          DATABRICKS_CLUSTER: ${{ secrets.DATABRICKS_CLUSTER }}
          MONGODB_HOST: ${{ secrets.MONGODB_HOST }}
          MONGODB_PORT: ${{ secrets.MONGODB_PORT }}
          MONGODB_USERNAME: ${{ secrets.MONGODB_USERNAME }}
          MONGODB_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}
          MONGODB_DATABASE: ${{ secrets.MONGODB_PASSWORD }}
          K8S_RUNNER_BASE_IMAGE: "local/k8s_runner:stable"
          K8S_RUNNER_SCIKIT: "local/k8s_runner:scikit-stable"
          S3_BUCKET_PATH: ${{ secrets.S3_BUCKET_PATH }}
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_PATH }}
          S3_BUCKET_REGION: ${{ secrets.S3_BUCKET_REGION }}
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          GCS_BUCKET_NAME: ${{ secrets.GCS_BUCKET_NAME }}
          GCP_CREDENTIALS_FILE: "./provider/gcp_credentials.json"
          FEATUREFORM_HOST: localhost:8000
          FEATUREFORM_CERT: tls.crt

        run: make test_e2e

      - name: Check That Dashboard Is Working
        id: link-report
        uses: celinekurpershoek/link-checker@master
        with:
          # Required:
          url: "http://localhost:7000"
          # optional:
          recursiveLinks: true
      - name: Print result
        run: echo "${{steps.link-report.outputs.result}}"

      # Backup runs every 60 seconds
      - name: Wait for backup to complete
        run: sleep 90

      - name: Disable Backup
        run: helm upgrade featureform ./charts/featureform --reuse-values --set backup.enabled=false

      - name: Restore
        env:
          CLOUD_PROVIDER: "AZURE"
          AZURE_STORAGE_ACCOUNT: ${{ secrets.AZURE_ACCOUNT_NAME }}
          AZURE_STORAGE_KEY: ${{ secrets.AZURE_ACCOUNT_KEY }}
          AZURE_CONTAINER_NAME: ${{ secrets.AZURE_CONTAINER_NAME }}
          AZURE_STORAGE_PATH: "backup"
        working-directory: ./backup/restore
        run: ./restore.sh --force

      - name: Test Restored Data
        env:
          FEATUREFORM_TEST_PATH: "tests/end_to_end/"
          FEATUREFORM_HOST: "localhost:8000"
          FEATUREFORM_CERT: "tls.crt"
        run: python tests/end_to_end/serving.py

      - name: Reset Quickstart
        run: |
          helm uninstall quickstart
          helm install quickstart ./charts/quickstart

      - name: Run CLI for Get and List Functions
        run: |
            kubectl get secret featureform-ca-secret -o=custom-columns=':.data.tls\.crt'| base64 -d > tls.crt
            featureform apply --no-wait client/examples/quickstart.py --host localhost:8000 --cert tls.crt
            featureform get label fraudulent --host localhost:8000 --cert tls.crt
            featureform get label fraudulent quickstart --host localhost:8000 --cert tls.crt
            featureform list labels --host localhost:8000 --cert tls.crt
            featureform get source transactions --host localhost:8000 --cert tls.crt
            featureform get source transactions kaggle --host localhost:8000 --cert tls.crt
            featureform list sources --host localhost:8000 --cert tls.crt
            featureform get feature avg_transactions --host localhost:8000 --cert tls.crt
            featureform get feature avg_transactions quickstart --host localhost:8000 --cert tls.crt
            featureform list features --host localhost:8000 --cert tls.crt
            featureform get provider redis-quickstart --host localhost:8000 --cert tls.crt
            featureform list providers --host localhost:8000 --cert tls.crt
            featureform get user featureformer --host localhost:8000 --cert tls.crt
            featureform list users --host localhost:8000 --cert tls.crt
            featureform get entity user --host localhost:8000 --cert tls.crt
            featureform list entities --host localhost:8000 --cert tls.crt

#
#      - name: Set Cert as Env Variable
#        run: export FEATUREFORM_CERT=$(pwd)/tls.crt
#
#      - name: Run Get Test
#        run: pytest client/src/featureform/get_test.pya
#
#      - name: Run List Test
#        run: pytest client/src/featureform/list_test.py

      - name: K8s Pods
        if: always()
        run: kubectl get pods

      - name: API Server Logs
        if: always()
        run: kubectl logs -l app=featureform-api-server

      - name: Coordinator Logs
        if: always()
        run: kubectl logs -l app=featureform-coordinator

      - name: Dashboard Logs
        if: always()
        run: kubectl logs -l app=featureform-dashboard

      - name: Dashboard Metadata Logs
        if: always()
        run: kubectl logs -l app=featureform-dashboard-metadata

      - name: Feature Server Logs
        if: always()
        run: kubectl logs -l app=featureform-feature-server

      - name: Ingress Logs
        if: always()
        run: kubectl logs -l app.kubernetes.io/name=ingress-nginx

      - name: Metadata Server Logs
        if: always()
        run: kubectl logs -l app=featureform-metadata-server

      - name: Quickstart Loader Logs
        if: always()
        continue-on-error: true
        run: kubectl logs -l job-name=featureform-quickstart-loader

      - name: Users
        if: always()
        continue-on-error: true
        run: curl http://localhost:7000/data/users

      - name: Providers
        if: always()
        continue-on-error: true
        run: curl http://localhost:7000/data/providers

      - name: Entities
        if: always()
        continue-on-error: true
        run: curl http://localhost:7000/data/entities

      - name: Sources
        if: always()
        continue-on-error: true
        run: curl http://localhost:7000/data/sources

      - name: Features
        if: always()
        continue-on-error: true
        run: curl http://localhost:7000/data/features

      - name: Labels
        if: always()
        continue-on-error: true
        run: curl http://localhost:7000/data/labels

      - name: Training Sets
        if: always()
        continue-on-error: true
        run: curl http://localhost:7000/data/training-sets

      - name: Cleanup Featureform
        if: always()
        continue-on-error: true
        run: helm uninstall featureform

      - name: Cleanup Cert Manager
        if: always()
        continue-on-error: true
        run: helm uninstall certmgr --namespace cert-manager

      - name: Cleanup Quickstart
        if: always()
        continue-on-error: true
        run: helm uninstall quickstart

      - name: Cleanup Hadoop
        if: always()
        continue-on-error: true
        run: |
          docker kill hadoop
          docker rm hadoop

      - name: Cleanup Docker
        if: always()
        continue-on-error: true
        run: | 
          docker system prune -a
          docker rmi $(docker images -a -q)

      - name: Cleanup Minikube
        if: always()
        continue-on-error: true
        run: minikube delete

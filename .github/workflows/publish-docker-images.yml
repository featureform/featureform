name: Publish Docker Images
on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version of helm package to deploy"
        required: true
        type: string
      type:
        description: "If this version is a release or pre-release"
        required: true
        default: "pre-release"
        type: choice
        options:
          - release
          - pre-release

env:
  RELEASE_TAG: ${{ inputs.version }}
  PRERELEASE_TAG: $${{ inputs.version }}-rc

jobs:
  standalone:
    name: Build Standalone Docker Container
    environment: Deployment
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set production tag
        run: ./.github/helpers/set_release_type.sh ${{ inputs.type }} $GITHUB_ENV ${{ inputs.version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          tags: featureformcom/featureform:${{ env.TAG }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and export
        if: ${{ inputs.type == 'release' }}
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          tags: featureformcom/featureform:latest
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  api-server:
    name: Build API Server
    environment: Deployment
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set production tag
        run: ./.github/helpers/set_release_type.sh ${{ inputs.type }} $GITHUB_ENV ${{ inputs.version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./api/Dockerfile
          tags: featureformcom/api-server:${{ env.TAG }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  backup:
    name: Build Backup Image
    environment: Deployment
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set production tag
        run: ./.github/helpers/set_release_type.sh ${{ inputs.type }} $GITHUB_ENV ${{ inputs.version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and export pre-release
        if: ${{ inputs.type == 'pre-release' }}
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./backup/Dockerfile
          tags: featureformcom/backup:${{ env.TAG }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and export release
        if: ${{ inputs.type == 'release' }}
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./backup/Dockerfile
          tags: featureformcom/backup:${{ env.TAG }},featureformcom/backup:latest
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  coordinator:
    name: Build Coordinator
    environment: Deployment
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set production tag
        run: ./.github/helpers/set_release_type.sh ${{ inputs.type }} $GITHUB_ENV ${{ inputs.version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./coordinator/Dockerfile
          tags: featureformcom/coordinator:${{ env.TAG }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  dashboard:
    name: Build Dashboard
    environment: Deployment
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set production tag
        run: ./.github/helpers/set_release_type.sh ${{ inputs.type }} $GITHUB_ENV ${{ inputs.version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./dashboard/Dockerfile
          tags: featureformcom/dashboard:${{ env.TAG }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  metadata:
    name: Build Metadata
    environment: Deployment
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set production tag
        run: ./.github/helpers/set_release_type.sh ${{ inputs.type }} $GITHUB_ENV ${{ inputs.version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./metadata/Dockerfile
          tags: featureformcom/metadata:${{ env.TAG }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  dashboard-metadata:
    name: Build Dashboard Metadata
    environment: Deployment
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set production tag
        run: ./.github/helpers/set_release_type.sh ${{ inputs.type }} $GITHUB_ENV ${{ inputs.version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./metadata/dashboard/Dockerfile
          tags: featureformcom/metadata-dashboard:${{ env.TAG }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  serving:
    name: Build Serving
    environment: Deployment
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set production tag
        run: ./.github/helpers/set_release_type.sh ${{ inputs.type }} $GITHUB_ENV ${{ inputs.version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./serving/Dockerfile
          tags: featureformcom/serving:${{ env.TAG }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  worker:
    name: Build Worker
    environment: Deployment
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set production tag
        run: ./.github/helpers/set_release_type.sh ${{ inputs.type }} $GITHUB_ENV ${{ inputs.version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./runner/Dockerfile
          tags: featureformcom/worker:${{ env.TAG }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  k8s_runner:
    name: Build k8s Runner
    environment: Deployment
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set production tag
        run: ./.github/helpers/set_release_type.sh ${{ inputs.type }} $GITHUB_ENV ${{ inputs.version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./provider/scripts/k8s/Dockerfile
          tags: featureformcom/k8s_runner:${{ env.TAG }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  db-migration-up:
    name: Build DB Migration Job
    environment: Deployment
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set production tag
        run: ./.github/helpers/set_release_type.sh ${{ inputs.type }} $GITHUB_ENV ${{ inputs.version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./db/Dockerfile
          tags: featureformcom/db-migration-up:${{ env.TAG }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  iceberg-streamer:
    name: Build Iceberg Streamer
    environment: Deployment
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set production tag
        run: ./.github/helpers/set_release_type.sh ${{ inputs.type }} $GITHUB_ENV ${{ inputs.version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./streamer/Dockerfile
          tags: featureformcom/iceberg-streamer:${{ env.TAG }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  iceberg-proxy:
    name: Build Iceberg Proxy
    environment: Deployment
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set production tag
        run: ./.github/helpers/set_release_type.sh ${{ inputs.type }} $GITHUB_ENV ${{ inputs.version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./streamer_proxy/Dockerfile
          tags: featureformcom/iceberg-proxy:${{ env.TAG }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max


  helm:
    name: Package Helm
    environment: Deployment
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set production tag
        run: ./.github/helpers/set_release_type.sh ${{ inputs.type }} $GITHUB_ENV ${{ inputs.version }}

      - name: Install Helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh

      - name: Install GCS CLI
        run: |
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
          sudo snap install google-cloud-cli --classic

      - name: Create GCloud Key
        id: gcloud-key-json
        uses: jsdaniell/create-json@1.1.2
        with:
          name: "./gcloud-key.json"
          json: ${{ secrets.GCLOUD_CREDENTIALS }}

      - name: Login GCS
        run: gcloud auth activate-service-account helm-bucket-sa@testing-352123.iam.gserviceaccount.com --key-file=gcloud-key.json --project=testing-352123

      - name: Update Charts
        run: ./update_helm.sh ${{ env.TAG }}
